@model ImageGallery.Models.Image

@{
    ViewData["Title"] = "Create";
}

<h2>Create</h2>

<h4>Image</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Create" method="post" enctype="multipart/form-data">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="Caption" class="control-label"></label>
                <input asp-for="Caption" class="form-control" />
                <span asp-validation-for="Caption" class="text-danger"></span>
            </div>
            @*<div class="form-group">
            <label asp-for="Created" class="control-label"></label>
            <input asp-for="Created" class="form-control" />
            <span asp-validation-for="Created" class="text-danger"></span>
        </div>*@
            @*<div class="form-group">
            <label asp-for="Location" class="control-label"></label>
            <input asp-for="Location" class="form-control" />
            <span asp-validation-for="Location" class="text-danger"></span>
        </div>*@
            <div id="locationField" class="form-group">
                <label asp-for="Location" class="control-label"></label>
                <input id="autocomplete"
                       placeholder="Enter your address"
                       onFocus="geolocate()"
                       type="text"
                       asp-for="Location"
                       class="form-control" />
            </div>
            <div class="form-group">
                <label asp-for="Url" class="control-label"></label>
                <input asp-for="Url" type="file" class="form-control" id="file" name="file" />
                <span asp-validation-for="Url" class="text-danger"></span>
                @*<input type="file" asp-for="Url" class="form-control"/>*@
                <img id="img-preview" style="max-width: 300px; " class="img img-responsive" src="">
            </div>
            <div class="form-group">
                <label class="control-label" asp-for="Filter"></label>
                <select id="filter" class="browser-default custom-select form-control" onchange="myFilter(this.value)" asp-for="Filter">
                    <option value="none">None</option>
                    <option value="invert(100%)">Invert</option>
                    <option value="grayscale(100%)">GrayScale</option>
                    <option value="sepia(100%)">Sepia</option>
                    <option value="brightness(150%)">Brightness</option>
                </select>
            </div>
            <div class="form-group">
                <label asp-for="AlbumID" class="control-label"></label>
                <select asp-for="AlbumID" class="form-control" asp-items="ViewBag.AlbumID"></select>
            </div>
            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}

<script>
    function myFilter(filter) {
        document.getElementById("img-preview").style.filter = filter;
    }
</script>

<script>

// This sample uses the Autocomplete widget to help the user select a
// place, then it retrieves the address components associated with that
// place, and then it populates the form fields with those details.
// This sample requires the Places library. Include the libraries=places
// parameter when you first load the API. For example:
//
//<script
// src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">

var placeSearch, autocomplete;

var componentForm = {
  street_number: 'short_name',
  route: 'long_name',
  locality: 'long_name',
  administrative_area_level_1: 'short_name',
  country: 'long_name',
  postal_code: 'short_name'
};

function initAutocomplete() {
  // Create the autocomplete object, restricting the search predictions to
  // geographical location types.
  autocomplete = new google.maps.places.Autocomplete(
      document.getElementById('autocomplete'), {types: ['geocode']});

  // Avoid paying for data that you don't need by restricting the set of
  // place fields that are returned to just the address components.
  autocomplete.setFields(['address_component']);

  // When the user selects an address from the drop-down, populate the
  // address fields in the form.
  autocomplete.addListener('place_changed', fillInAddress);
}

function fillInAddress() {
  // Get the place details from the autocomplete object.
  var place = autocomplete.getPlace();

  for (var component in componentForm) {
    document.getElementById(component).value = '';
    document.getElementById(component).disabled = false;
  }

  // Get each component of the address from the place details,
  // and then fill-in the corresponding field on the form.
  for (var i = 0; i < place.address_components.length; i++) {
    var addressType = place.address_components[i].types[0];
    if (componentForm[addressType]) {
      var val = place.address_components[i][componentForm[addressType]];
      document.getElementById(addressType).value = val;
    }
  }
}

// Bias the autocomplete object to the user's geographical location,
// as supplied by the browser's 'navigator.geolocation' object.
function geolocate() {
  if (navigator.geolocation) {
    navigator.geolocation.getCurrentPosition(function(position) {
      var geolocation = {
        lat: position.coords.latitude,
        lng: position.coords.longitude
      };
      var circle = new google.maps.Circle(
          {center: geolocation, radius: position.coords.accuracy});
      autocomplete.setBounds(circle.getBounds());
    });
  }
}
    </script>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAhf4zoW_uYGLEV0HQK8i0G8MNl1qp2xK0&libraries=places&callback=initAutocomplete"
        async defer></script>